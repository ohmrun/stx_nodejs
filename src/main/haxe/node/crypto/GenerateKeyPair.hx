package node.crypto;

@:jsRequire("crypto", "generateKeyPair") @valueModuleOnly extern class GenerateKeyPair {
	@:overload(function(type:String, options:RSAKeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:String, privateKey:global.Buffer) -> Void):Void { })
	@:overload(function(type:String, options:RSAKeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:global.Buffer, privateKey:String) -> Void):Void { })
	@:overload(function(type:String, options:RSAKeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:global.Buffer, privateKey:global.Buffer) -> Void):Void { })
	@:overload(function(type:String, options:RSAKeyPairKeyObjectOptions, callback:(err:Null<js.lib.Error>, publicKey:KeyObject, privateKey:KeyObject) -> Void):Void { })
	@:overload(function(type:String, options:DSAKeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:String, privateKey:String) -> Void):Void { })
	@:overload(function(type:String, options:DSAKeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:String, privateKey:global.Buffer) -> Void):Void { })
	@:overload(function(type:String, options:DSAKeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:global.Buffer, privateKey:String) -> Void):Void { })
	@:overload(function(type:String, options:DSAKeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:global.Buffer, privateKey:global.Buffer) -> Void):Void { })
	@:overload(function(type:String, options:DSAKeyPairKeyObjectOptions, callback:(err:Null<js.lib.Error>, publicKey:KeyObject, privateKey:KeyObject) -> Void):Void { })
	@:overload(function(type:String, options:ECKeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:String, privateKey:String) -> Void):Void { })
	@:overload(function(type:String, options:ECKeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:String, privateKey:global.Buffer) -> Void):Void { })
	@:overload(function(type:String, options:ECKeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:global.Buffer, privateKey:String) -> Void):Void { })
	@:overload(function(type:String, options:ECKeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:global.Buffer, privateKey:global.Buffer) -> Void):Void { })
	@:overload(function(type:String, options:ECKeyPairKeyObjectOptions, callback:(err:Null<js.lib.Error>, publicKey:KeyObject, privateKey:KeyObject) -> Void):Void { })
	@:overload(function(type:String, options:ED25519KeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:String, privateKey:String) -> Void):Void { })
	@:overload(function(type:String, options:ED25519KeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:String, privateKey:global.Buffer) -> Void):Void { })
	@:overload(function(type:String, options:ED25519KeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:global.Buffer, privateKey:String) -> Void):Void { })
	@:overload(function(type:String, options:ED25519KeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:global.Buffer, privateKey:global.Buffer) -> Void):Void { })
	@:overload(function(type:String, options:Null<ED25519KeyPairKeyObjectOptions>, callback:(err:Null<js.lib.Error>, publicKey:KeyObject, privateKey:KeyObject) -> Void):Void { })
	@:overload(function(type:String, options:ED448KeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:String, privateKey:String) -> Void):Void { })
	@:overload(function(type:String, options:ED448KeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:String, privateKey:global.Buffer) -> Void):Void { })
	@:overload(function(type:String, options:ED448KeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:global.Buffer, privateKey:String) -> Void):Void { })
	@:overload(function(type:String, options:ED448KeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:global.Buffer, privateKey:global.Buffer) -> Void):Void { })
	@:overload(function(type:String, options:Null<ED448KeyPairKeyObjectOptions>, callback:(err:Null<js.lib.Error>, publicKey:KeyObject, privateKey:KeyObject) -> Void):Void { })
	@:overload(function(type:String, options:X25519KeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:String, privateKey:String) -> Void):Void { })
	@:overload(function(type:String, options:X25519KeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:String, privateKey:global.Buffer) -> Void):Void { })
	@:overload(function(type:String, options:X25519KeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:global.Buffer, privateKey:String) -> Void):Void { })
	@:overload(function(type:String, options:X25519KeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:global.Buffer, privateKey:global.Buffer) -> Void):Void { })
	@:overload(function(type:String, options:Null<X25519KeyPairKeyObjectOptions>, callback:(err:Null<js.lib.Error>, publicKey:KeyObject, privateKey:KeyObject) -> Void):Void { })
	@:overload(function(type:String, options:X448KeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:String, privateKey:String) -> Void):Void { })
	@:overload(function(type:String, options:X448KeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:String, privateKey:global.Buffer) -> Void):Void { })
	@:overload(function(type:String, options:X448KeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:global.Buffer, privateKey:String) -> Void):Void { })
	@:overload(function(type:String, options:X448KeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:global.Buffer, privateKey:global.Buffer) -> Void):Void { })
	@:overload(function(type:String, options:Null<X448KeyPairKeyObjectOptions>, callback:(err:Null<js.lib.Error>, publicKey:KeyObject, privateKey:KeyObject) -> Void):Void { })
	@:selfCall
	static function call(type:String, options:RSAKeyPairOptions<String, String>, callback:(err:Null<js.lib.Error>, publicKey:String, privateKey:String) -> Void):Void;
}